[metadata]
name = sahara
version = 2015.1
summary = Sahara project
description-file = README.rst
license = Apache Software License
classifiers =
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Environment :: OpenStack
    Intended Audience :: Information Technology
    Intended Audience :: System Administrators
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
author = OpenStack
author-email = openstack-dev@lists.openstack.org
home-page = http://docs.openstack.org/developer/sahara/

[global]
setup-hooks = pbr.hooks.setup_hook

[files]
packages =
    sahara

data_files =
    share/sahara = etc/sahara/*

[entry_points]
console_scripts =
    sahara-all = sahara.cli.sahara_all:main
    sahara-api = sahara.cli.sahara_api:main
    sahara-engine = sahara.cli.sahara_engine:main
    sahara-db-manage = sahara.db.migration.cli:main
    sahara-rootwrap = oslo_rootwrap.cmd:main
    _sahara-subprocess = sahara.cli.sahara_subprocess:main

sahara.cluster.plugins =
    vanilla = sahara.plugins.vanilla.plugin:VanillaProvider
    hdp = sahara.plugins.hdp.ambariplugin:AmbariPlugin
    mapr = sahara.plugins.mapr.plugin:MapRPlugin
    cdh = sahara.plugins.cdh.plugin:CDHPluginProvider
    fake = sahara.plugins.fake.plugin:FakePluginProvider
    spark = sahara.plugins.spark.plugin:SparkProvider
    storm = sahara.plugins.storm.plugin:StormProvider

sahara.infrastructure.engine =
    direct = sahara.service.direct_engine:DirectEngine
    heat = sahara.service.heat_engine:HeatEngine

sahara.remote =
    ssh = sahara.utils.ssh_remote:SshRemoteDriver

sahara.run.mode =
    all-in-one = sahara.service.ops:LocalOps
    distributed = sahara.service.ops:RemoteOps

oslo.config.opts =
    sahara.config = sahara.config:list_opts
    periodic.config = sahara.openstack.common.periodic_task:list_opts
    policy.config = sahara.openstack.common.policy:list_opts
    ssl.config = sahara.openstack.common.sslutils:list_opts

[build_sphinx]
all_files = 1
build-dir = doc/build
source-dir = doc/source

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = sahara/locale/sahara.pot

[compile_catalog]
directory = sahara/locale
domain = sahara

[update_catalog]
domain = sahara
output_dir = sahara/locale
input_file = sahara/locale/sahara.pot
