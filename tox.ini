[tox]
envlist = py35,py34,py27,pep8
minversion = 1.6
skipsdist = True

[testenv]
usedevelop = True
install_command = pip install -U {opts} {packages}
setenv =
    VIRTUAL_ENV={envdir}
    DISCOVER_DIRECTORY=sahara/tests/unit
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/test-requirements.txt
commands = ostestr {posargs}
passenv = http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY

[testenv:cover]
commands = {toxinidir}/tools/cover.sh {posargs}

[testenv:debug-py27]
basepython = python2.7
commands = oslo_debug_helper {posargs}

[testenv:debug-py34]
basepython = python3.4
commands = oslo_debug_helper {posargs}

[testenv:debug-py35]
basepython = python3.5
commands = oslo_debug_helper {posargs}

[testenv:pep8]
commands =
    flake8 {posargs}
    doc8 doc/source
    # Run bashate checks
    bash -c "find sahara -iname '*.sh' -print0 | xargs -0 bashate -v"
    bash -c "find devstack -not -name README.rst -and -not -name \*.json -type f -print0 | xargs -0 bashate -v"
    # Run security linter
    bandit -c bandit.yaml -r sahara -n5 -p sahara_default -x tests

[testenv:venv]
commands = {posargs}

[testenv:images]
sitepackages = True
commands = {posargs}

[testenv:docs]
commands =
    rm -rf doc/html doc/build
    rm -rf api-ref/build api-ref/html
    rm -rf doc/source/apidoc doc/source/api
    python setup.py build_sphinx
    sphinx-build -b html -d api-ref/build/doctrees api-ref/source api-ref/build/html
whitelist_externals =
    rm

[testenv:api-ref]
install_command = pip install -U --force-reinstall {opts} {packages}
commands =
  rm -rf api-ref/build api-ref/html
  sphinx-build -b html -d api-ref/build/doctrees api-ref/source api-ref/build/html
whitelist_externals =
    rm


[testenv:pylint]
setenv = VIRTUAL_ENV={envdir}
commands = bash tools/lintstack.sh

[testenv:genconfig]
commands =
    oslo-config-generator --config-file tools/config/config-generator.sahara.conf \
    --output-file etc/sahara/sahara.conf.sample

[testenv:releasenotes]
commands = sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:pip-missing-reqs]
# do not install test-requirements as that will pollute the virtualenv for
# determining missing packages
# this also means that pip-missing-reqs must be installed separately, outside
# of the requirements.txt files
deps =
    pip_missing_reqs
    -r{toxinidir}/requirements.txt
commands = pip-missing-reqs -d --ignore-file=sahara/tests/* sahara

[testenv:debug]
# It runs tests from the specified dir (default is sahara/tests)
# in interactive mode, so, you could use pbr for tests debug.
# Example usage: tox -e debug -- -t sahara/tests/unit some.test.path
# http://docs.openstack.org/developer/oslotest/features.html#debugging-with-oslo-debug-helper
commands = oslo_debug_helper {posargs}

[testenv:bandit]
deps = -r{toxinidir}/test-requirements-bandit.txt
commands = bandit -c bandit.yaml -r sahara -n5 -p sahara_default -x tests

[flake8]
show-source = true
builtins = _
exclude=.venv,.git,.tox,dist,doc,*lib/python*,*egg,tools

[hacking]
import_exceptions = sahara.i18n
local-check-factory = sahara.utils.hacking.checks.factory
