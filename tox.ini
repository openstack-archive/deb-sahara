[tox]
envlist = py27,pep8
minversion = 1.6
skipsdist = True

[testenv]
usedevelop = True
install_command = pip install -U {opts} {packages}
setenv =
    VIRTUAL_ENV={envdir}
    DISCOVER_DIRECTORY=sahara/tests/unit
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/test-requirements.txt
commands = bash tools/pretty_tox.sh '{posargs}'
whitelist_externals = bash

[testenv:integration]
setenv =
    VIRTUAL_ENV={envdir}
    DISCOVER_DIRECTORY=sahara/tests/integration
commands = bash tools/pretty_tox.sh '{posargs}'

[testenv:scenario]
setenv = VIRTUALENV={envdir}
commands = python {toxinidir}/sahara/tests/scenario/runner.py {posargs}

[testenv:cover]
commands = python setup.py testr --coverage --testr-args='{posargs}'

[tox:jenkins]
downloadcache = ~/cache/pip

[testenv:pep8]
commands =
    flake8 {posargs}
    # Check that .po and .pot files are valid:
    bash -c "find sahara -type f -regex '.*\.pot?' -print0|xargs -0 -n 1 msgfmt --check-format -o /dev/null"
    # Run bashate checks
    bash -c "find sahara -iname '*.sh' -print0 | xargs -0 bashate"

[testenv:doc8]
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/test-requirements.txt
    doc8
commands = doc8 doc/source

[testenv:venv]
commands = {posargs}

[testenv:docs]
commands =
    rm -rf doc/html doc/build
    rm -rf doc/source/apidoc doc/source/api
    python setup.py build_sphinx
whitelist_externals =
    rm

[testenv:pylint]
setenv = VIRTUAL_ENV={envdir}
commands = bash tools/lintstack.sh

[testenv:genconfig]
commands =
    oslo-config-generator --config-file tools/config/config-generator.sahara.conf \
    --output-file etc/sahara/sahara.conf.sample

[testenv:checkconfig]
commands =
    {toxinidir}/tools/config/check_uptodate.sh

[testenv:pip-missing-reqs]
# do not install test-requirements as that will pollute the virtualenv for
# determining missing packages
# this also means that pip-missing-reqs must be installed separately, outside
# of the requirements.txt files
deps =
    pip_missing_reqs
    -r{toxinidir}/requirements.txt
commands = pip-missing-reqs -d --ignore-file=sahara/tests/* sahara

[testenv:debug]
# It runs tests from the specified dir (default is sahara/tests)
# in interactive mode, so, you could use pbr for tests debug.
# Example usage: tox -e debug -- -t sahara/tests/unit some.test.path
# http://docs.openstack.org/developer/oslotest/features.html#debugging-with-oslo-debug-helper
commands = oslo_debug_helper {posargs}

[flake8]
show-source = true
builtins = _
exclude=.venv,.git,.tox,dist,doc,*openstack/common*,*lib/python*,*egg,tools

[hacking]
import_exceptions = sahara.i18n._, sahara.i18n._LI, sahara.i18n._LW, sahara.i18n._LE, sahara.i18n._LC
local-check-factory = sahara.utils.hacking.checks.factory
